# -*- coding: utf-8 -*-
"""webc merdaco

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16La3cFj4JpB_HtxaFFdwxVLtyM3agUbs
"""

web scrapping do mercado que fiz (da para usar algumas partes de base para este novo codigo)

import requests
from bs4 import BeautifulSoup
import csv
from datetime import datetime
import time

def get_product_price(url):
    try:
        # Make the HTTP request
        response = requests.get(url)

        # Parse HTML content
        soup = BeautifulSoup(response.text, 'html.parser')

        # Find parent span with class="sales mr-2" first
        parent_span = soup.find('span', class_='sales mr-2')

        # Then find child span with class="value" inside parent
        if parent_span:
            price_span = parent_span.find('span', class_='value')
            if price_span and price_span.get('content'):
                return float(price_span['content'])
        return None
    except Exception as e:
        print(f"Error fetching price: {str(e)}")
        return None

def process_products():
    base_url = "https://www.jauserve.com.br/on/demandware.store/Sites-JauServe-Site/pt_BR/Product-Show?pid="
    today = datetime.now().strftime('%Y-%m-%d')

    # Create/open CSV file
    with open(f'prices_{today}.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(['EAN', 'Price', 'Date'])

        # Read PIDs from products.txt
        try:
            with open('products.txt', 'r') as f:
                pids = [line.strip() for line in f if line.strip()]


            # Process each PID
            for pid in pids:
                full_url = base_url + pid
                price = get_product_price(full_url)

                # Add row to CSV
                writer.writerow([pid, price if price else "Not found", today])

                # Small delay to avoid overwhelming the server
                time.sleep(1)

        except FileNotFoundError:
            print("products.txt file not found!")
        except Exception as e:
            print(f"Error processing products: {str(e)}")

if __name__ == "__main__":
    process_products()